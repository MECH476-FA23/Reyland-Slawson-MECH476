bodysize_data <- readr::read_csv(file = bodysize_csv)
model1 <- lm(formula = height ~ waist,
data = bodysize_data)
coef_m1 <- coefficients(model1)
model2 <- lm(formula = height ~ mass,
data = bodysize_data)
coef_m2 <- coefficients(model2)
model3 <- lm(formula = height ~ waist + mass,
data = bodysize_data)
coef_m3 <- coefficients(model3)
coef_m1
coef_m2
coef_m3
bodysize_data <- bodysize_data %>%
dplyr::mutate(volume = waist^2 * height)
model4 <- lm(mass ~ volume,
data = bodysize_data)
summary(model4)
q2b_plot <- ggplot(data = bodysize_data) +
geom_point(aes(x = volume,
y = mass),
alpha = 0.3,
color = "lightblue") +
geom_smooth(aes(x = volume,
y = mass),
method = "lm",
formula = "y ~ x",
color = "black") +
labs(x = "Volume (cm^3)",
y = "Mass (kg)",
title = "Volume vs Mass") +
theme_bw()
q2b_plot
# load data
caload_csv <- "/Users/genevieve/Reyland-MECH476/data/cal_aod.csv"
cal_aod <- readr::read_csv(file = caload_csv)
caload_model <- lm(formula = amod ~ aeronet,
data = cal_aod)
#assumption 4: mean of residuals is zero
caload_mean <- mean(caload_model$residuals)
caload_mean
q3b_model <- ggplot(data = caload_model$model,
aes(sample = caload_model$residuals)) +
geom_qq(alpha = 0.3,
color = "pink") +
geom_qq_line(color = "black") +
scale_y_continuous(limits(-0.1, 0.2)) +
labs(title = "Mass vs Waist") +
theme_bw()
q3b_model <- ggplot(data = caload_model$model,
aes(sample = caload_model$residuals)) +
geom_qq(alpha = 0.3,
color = "pink") +
geom_qq_line(color = "black") +
scale_y_continuous(limits = c(-0.1, 0.2)) +
labs(title = "Mass vs Waist") +
theme_bw()
q3b_model
q3b_model <- ggplot(data = caload_model$model,
aes(sample = caload_model$residuals)) +
geom_qq(alpha = 0.3,
color = "maroon") +
geom_qq_line(color = "black") +
scale_y_continuous(limits = c(-0.1, 0.2)) +
labs(title = "Mass vs Waist") +
theme_bw()
q3b_model
q3b_model <- ggplot(data = caload_model$model,
aes(sample = caload_model$residuals)) +
geom_qq(alpha = 0.5,
color = "maroon") +
geom_qq_line(color = "black") +
scale_y_continuous(limits = c(-0.1, 0.2)) +
labs(title = "Mass vs Waist") +
theme_bw()
q3b_model
q3c <- ggplot(data = caload_model$model) +
geom_point(aes(x = caload_model$fitted.values,
y = caload_model$residuals),
alpha = 0.3,
color = "skyblue") +
geom_hline*yintercept = 0) +
q3c <- ggplot(data = caload_model$model) +
geom_point(aes(x = caload_model$fitted.values,
y = caload_model$residuals),
alpha = 0.3,
color = "skyblue") +
geom_hline(yintercept = 0) +
labs(x = "Residuals",
y = "Fitted Values",
title = "Mass vs Weight") +
theme_bw()
q3c
```{r ch11-homework-q3b}
q3b_model <- ggplot(data = caload_model$model,
aes(sample = caload_model$residuals)) +
geom_qq(alpha = 0.8,
color = "maroon") +
geom_qq_line(color = "black") +
scale_y_continuous(limits = c(-0.1, 0.2)) +
labs(title = "Mass vs Waist") +
theme_bw()
q3b_model
q3c <- ggplot(data = caload_model$model) +
geom_point(aes(x = caload_model$fitted.values,
y = caload_model$residuals),
alpha = 0.8,
color = "skyblue") +
geom_hline(yintercept = 0) +
labs(x = "Residuals",
y = "Fitted Values",
title = "Mass vs Weight") +
theme_bw()
q3c
q3d <- cor(x = cal_model$residuals,
y = cal_model$model[,2],
method = "peason")
q3d <- cor(x = cal_model$residuals,
y = cal_model$model[,2],
method = "pearson")
q3d <- cor(x = cal_model$residuals,
y = cal_model$model[,2],
method = "pearson")
q3d <- cor(x = caload_model$residuals,
y = caload_model$model[,2],
method = "pearson")
q3d
q2b_plot <- ggplot(data = bodysize_data) +
geom_point(aes(x = volume,
y = mass),
alpha = 0.3,
fill = "lightblue") +
geom_smooth(aes(x = volume,
y = mass),
method = "lm",
formula = "y ~ x",
color = "black") +
labs(x = "Volume (cm^3)",
y = "Mass (kg)",
title = "Volume vs Mass") +
theme_bw()
q2b_plot
q2b_plot <- ggplot(data = bodysize_data) +
geom_point(aes(x = volume,
y = mass),
alpha = 0.3,
color = "lightblue") +
geom_smooth(aes(x = volume,
y = mass),
method = "lm",
formula = "y ~ x",
color = "black") +
labs(x = "Volume (cm^3)",
y = "Mass (kg)",
title = "Volume vs Mass") +
theme_bw()
q2b_plot
model1 <- lm(mass ~ waist,
data = data_18)
# set global options for figures, code, warnings, and messages
knitr::opts_chunk$set(fig.width = 6, fig.height = 4, fig.path = "../figs/",
echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
body_csv <- "/Users/genevieve/Reyland-MECH476/data/bodysize.csv"
body_data <- readr::read_csv(file = body_csv)
ggplot(data = body_data) +
geom_point(aes(x = waist,
y = mass),
alpha = 0.3)
p1 <- ggplot(data = body_data) +
geom_point(aes(x = waist, y = mass),
alpha = 0.1,
color = "maroon4") +
ylab("Mass, kg") +
xlab("Waist Circumference, cm") +
theme_classic(base_size = 13)
p2 <- ggplot(data = body_data) +
geom_point(aes(x = waist, y = sqrt_mass),
alpha = 0.1,
color = "royalblue2") +
ylab(expression(sqrt(mass))) +
xlab("Waist Circumference, cm") +
theme_classic(base_size = 13)
grid.arrange(p1, p2, ncol = 2)
model1 <- lm(mass ~ waist,
data = data_18)
model1 <- lm(mass ~ waist,
data = body_data)
model1 <- lm(mass ~ waist,
data = body_data)
model2 <- lm(sqrt_mass ~ waist,
data = body_data)
summary(model1)
```
summary(model1)
mean(model1$residuals)
mean(model2$residuals)
p3 <- ggplot(data  = model1$model, aes(sample = model1$residuals)) +
geom_qq(alpha = 0.1,
color = "maroon4") +
geom_qq_line(color = "grey") +
ggtitle("Model 1: mass ~ waist") +
theme_classic()
p4 <- ggplot(data  = model2$model, aes(sample = model2$residuals)) +
geom_qq(alpha = 0.1,
color = "royalblue2") +
geom_qq_line(color = "grey") +
ggtitle("Model 2: sqrt(mass) ~ waist") +
theme_classic()
grid.arrange(p3, p4, ncol = 2)
library(tidyverse)
library(ggplot2)
library(gridExtra)
mean(model1$residuals)
mean(model2$residuals)
p3 <- ggplot(data  = model1$model, aes(sample = model1$residuals)) +
geom_qq(alpha = 0.1,
color = "maroon4") +
geom_qq_line(color = "grey") +
ggtitle("Model 1: mass ~ waist") +
theme_classic()
p4 <- ggplot(data  = model2$model, aes(sample = model2$residuals)) +
geom_qq(alpha = 0.1,
color = "royalblue2") +
geom_qq_line(color = "grey") +
ggtitle("Model 2: sqrt(mass) ~ waist") +
theme_classic()
grid.arrange(p3, p4, ncol = 2)
# line is expected to be perfect, so the points should be on the line to be evenly distributed. The graphs show the expected over a normal distribution
mean(model1$residuals)
mean(model2$residuals)
## Q-Q Plot to check for Assumption 5: the error term is normall distributed
p3 <- ggplot(data  = model1$model, aes(sample = model1$residuals)) +
geom_qq(alpha = 0.1,
color = "maroon4") +
geom_qq_line(color = "grey") +
ggtitle("Model 1: mass ~ waist") +
theme_classic()
p4 <- ggplot(data  = model2$model, aes(sample = model2$residuals)) +
geom_qq(alpha = 0.1,
color = "royalblue2") +
geom_qq_line(color = "grey") +
ggtitle("Model 2: sqrt(mass) ~ waist") +
theme_classic()
grid.arrange(p3, p4, ncol = 2)
# line is expected to be perfect, so the points should be on the line to be evenly distributed. The graphs show the expected over a normal distribution
## checking assumption 6: the error term is homoscedastic
p5 <- ggplot(data = model1$model) +
geom_point(aes(x = model1$fitted.values, y =model1$residuals),
alpha = 0.25,
color = "maroon3") +
geom_hline(yintercept = 0) +
theme_classic() +
theme(aspect.ratio = 0.5)
p6 <- ggplot(data = model2$model)+
geom_point(aes(x = model2$fitted.values, y =model2$residuals),
alpha = 0.25,
color= "royalblue2") +
geom_hline(yintercept = 0) +
theme_classic() +
theme(aspect.ratio = 0.5)
grid.arrange(p5, p6, ncol = 1)
# checking assumption 7: no autocorrelation among residuals
stats:pacf(model$residuals,
main = "Model 1 Partial Autocorrelation Plot")
# checking assumption 7: no autocorrelation among residuals
stats::pacf(model$residuals,
main = "Model 1 Partial Autocorrelation Plot")
# checking assumption 7: no autocorrelation among residuals
stats::pacf(model1$residuals,
main = "Model 1 Partial Autocorrelation Plot")
#checking assumption 8: residuals are not correlated with predictor variables
cor(x = model1$residuals,
y = model1$model[,2],
method = "pearson" )
cor(x = model2$residuals,
y = model1$model[,2],
method = "pearson" )
body_csv <- "/Users/genevieve/Reyland-MECH476/data/bodysize.csv"
body_data <- readr::read_csv(file = body_csv) %>%
mutate(sex = gender - 1)
ggplot(data = body_data) +
geom_point(aes(x = waist,
y = mass),
alpha = 0.3)
model3 <- lm(mass ~ waist + gender, data = body_data)
sumary(model3)
model3 <- lm(mass ~ waist + gender, data = body_data)
summary(model3)
View(model1)
View(body_data)
model3 <- lm(mass ~ waist + gender, data = body_data)
summary(model3)
# specify model more
model4 <- lm(mass ~ height*waist^2 + gender + age, data = body_data)
summary(model4)
cal_csv <- "/Users/genevieve/Reyland-MECH476/data/cal_aod.csv"
cal_data <- read_csv(file = cal_csv, col_names = TRUE)
# set global options for figures, code, warnings, and messages
knitr::opts_chunk$set(fig.width = 6, fig.height = 4, fig.path = "../figs/",
echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(gridExtra)
body_csv <- "/Users/genevieve/Reyland-MECH476/data/bodysize.csv"
body_data <- readr::read_csv(file = body_csv) %>%
mutate(sex = gender - 1)
ggplot(data = body_data) +
geom_point(aes(x = waist,
y = mass),
alpha = 0.3)
p1 <- ggplot(data = body_data) +
geom_point(aes(x = waist, y = mass),
alpha = 0.1,
color = "maroon4") +
ylab("Mass, kg") +
xlab("Waist Circumference, cm") +
theme_classic(base_size = 13)
p2 <- ggplot(data = body_data) +
geom_point(aes(x = waist, y = sqrt_mass),
alpha = 0.1,
color = "royalblue2") +
ylab(expression(sqrt(mass))) +
xlab("Waist Circumference, cm") +
theme_classic(base_size = 13)
grid.arrange(p1, p2, ncol = 2)
# linear model = lm(), performs an OLS fit on any linear model specified
# lm() requires two args a formula and the data (y ~ x)
model1 <- lm(mass ~ waist, data = body_data)
model2 <- lm(sqrt_mass ~ waist, data = body_data)
model1$coefficients
summary(model1)
# note how we can add layers to existing ggplot objects: added more to geom_smooth method, formula, color
p1.2 <- p1 +
geom_smooth(data = body_data,
aes(x = waist, y = mass),
method = "lm",
formula = "y ~ x",
color = "black")
p2.2 <- p2 +
geom_abline(intercept = model2$coefficients[[1]],
slope = model2$coefficients[[2]])
grid.arrange(p1.2, p2.2, ncol = 2)
# note how we can add layers to existing ggplot objects to see how the fit is
p1.2 <- p1 +
geom_smooth(data = data_18,
aes(x = waist, y = mass),
method = "lm",
formula = "y ~ x",
color = "black")
# note how we can add layers to existing ggplot objects to see how the fit is
p1.2 <- p1 +
geom_smooth(data = body_data,
aes(x = waist, y = mass),
method = "lm",
formula = "y ~ x",
color = "black")
p2.2 <- p2 +
geom_abline(intercept = model2$coefficients[[1]],
slope = model2$coefficients[[2]])
grid.arrange(p1.2, p2.2, ncol = 2)
# set global options for figures, code, warnings, and messages
knitr::opts_chunk$set(fig.width = 6, fig.height = 4, fig.path = "../figs/",
echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(gridExtra)
body_csv <- "/Users/genevieve/Reyland-MECH476/data/bodysize.csv"
body_data <- readr::read_csv(file = body_csv) %>%
mutate(sex = gender - 1)
ggplot(data = body_data) +
geom_point(aes(x = waist,
y = mass),
alpha = 0.3)
p1 <- ggplot(data = body_data) +
geom_point(aes(x = waist, y = mass),
alpha = 0.1,
color = "maroon4") +
ylab("Mass, kg") +
xlab("Waist Circumference, cm") +
theme_classic(base_size = 13)
p2 <- ggplot(data = body_data) +
geom_point(aes(x = waist, y = sqrt_mass),
alpha = 0.1,
color = "royalblue2") +
ylab(expression(sqrt(mass))) +
xlab("Waist Circumference, cm") +
theme_classic(base_size = 13)
grid.arrange(p1, p2, ncol = 2)
# linear model = lm(), performs an OLS fit on any linear model specified
# lm() requires two args a formula and the data (y ~ x)
model1 <- lm(mass ~ waist, data = body_data)
model2 <- lm(sqrt_mass ~ waist, data = body_data)
model1$coefficients
summary(model1)
# note how we can add layers to existing ggplot objects: added more to geom_smooth method, formula, color
p1.2 <- p1 +
geom_smooth(data = body_data,
aes(x = waist, y = mass),
method = "lm",
formula = "y ~ x",
color = "black")
p2.2 <- p2 +
geom_abline(intercept = model2$coefficients[[1]],
slope = model2$coefficients[[2]])
grid.arrange(p1.2, p2.2, ncol = 2)
# note how we can add layers to existing ggplot objects to see how the fit is
p1.2 <- p1 +
geom_smooth(data = body_data,
aes(x = waist, y = mass),
method = "lm",
formula = "y ~ x",
color = "black")
p2.2 <- p2 +
geom_abline(intercept = model2$coefficients[[1]],
slope = model2$coefficients[[2]])
grid.arrange(p1.2, p2.2, ncol = 2)
mean(model1$residuals)
mean(model2$residuals)
## Q-Q Plot to check for Assumption 5: the error term is normall distributed
p3 <- ggplot(data  = model1$model, aes(sample = model1$residuals)) +
geom_qq(alpha = 0.1,
color = "maroon4") +
geom_qq_line(color = "grey") +
ggtitle("Model 1: mass ~ waist") +
theme_classic()
p4 <- ggplot(data  = model2$model, aes(sample = model2$residuals)) +
geom_qq(alpha = 0.1,
color = "royalblue2") +
geom_qq_line(color = "grey") +
ggtitle("Model 2: sqrt(mass) ~ waist") +
theme_classic()
grid.arrange(p3, p4, ncol = 2)
# line is expected to be perfect, so the points should be on the line to be evenly distributed. The graphs show the expected over a normal distribution
## checking assumption 6: the error term is homoscedastic
# shows resudal's size versus the y value
p5 <- ggplot(data = model1$model) +
geom_point(aes(x = model1$fitted.values, y =model1$residuals),
alpha = 0.25,
color = "maroon3") +
geom_hline(yintercept = 0) +
theme_classic() +
theme(aspect.ratio = 0.5)
p6 <- ggplot(data = model2$model)+
geom_point(aes(x = model2$fitted.values, y =model2$residuals),
alpha = 0.25,
color= "royalblue2") +
geom_hline(yintercept = 0) +
theme_classic() +
theme(aspect.ratio = 0.5)
grid.arrange(p5, p6, ncol = 1)
model3 <- lm(mass ~ waist + gender, data = body_data)
summary(model3)
# specify model more
model4 <- lm(mass ~ height*waist^2 + gender + age, data = body_data)
summary(model4)
# checking assumption 7: no autocorrelation among residuals
stats::pacf(model1$residuals,
main = "Model 1 Partial Autocorrelation Plot")
stats::pacf(model2$residuals,
main = "Model 2 Partial Autocorrelation Plot")
# neither plot show a strong degree of autocorrelation, make it better by dividing the models by sex
# checking assumption 8: residuals are not correlated with predictor variables
cor(x = model1$residuals,
y = model1$model[,2],
method = "pearson" )
cor(x = model2$residuals,
y = model1$model[,2],
method = "pearson" )
# both very small numbers, model 2 is better specified (not better performing necessarily), but based on fit diagnostics and process knowledge, model 2 is better. Both explained ~80% of variance in dependent variable.
# checking assumption 7: no autocorrelation among residuals
stats::pacf(model1$residuals,
main = "Model 1 Partial Autocorrelation Plot")
stats::pacf(model2$residuals,
main = "Model 2 Partial Autocorrelation Plot")
# neither plot show a strong degree of autocorrelation, make it better by dividing the models by sex
cal_csv <- "/Users/genevieve/Reyland-MECH476/data/cal_aod.csv"
cal_data <- read_csv(file = cal_csv, col_names = TRUE)
head(cal_data)
cal_csv <- "/Users/genevieve/Reyland-MECH476/data/cal_aod.csv"
cal_data <- read_csv(file = cal_csv, col_names = TRUE)
head(cal_data)
tidy_cal <- cal_data %>%
pivot_longer(cols = c("amod", "aeronet"),
names_to = "instrument",
values_to = "aod")
head(tidy_cal)
aod.fit <- lm(amod ~ aeronet, data = cal_data)
aod.summary <- summary(aod.fit)
aod.summary
aod.fit <- lm(amod ~ aeronet, data = cal_data)
aod.summary <- summary(aod.fit)
aod.summary
# plot data and fit
ggplot(data = cal_data,
aes(x = aeronet, y = amod)) +
geom_smooth(formula = y ~ x,
method = "lm",
linewidth = 0.5) +
geom_point(alpha = 0.25,
size = 2) +
xlab("Aeronet AOD") +
ylab("AMOD AOD") +
annotate("text", x = 0.5, y = 1.5,
label = paste("Y = ",
round(aod.summary$coefficients[[2,1]], 2),
"X + ", round(aod.summary$coefficients[[1,1]], 2),
"\n R^2 = ",
round(aod.summary$r.squared, 3))) +
coord_fixed() +
theme_bw(base_size = 12)
