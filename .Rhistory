y = "Number of Tweets") +
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour),
color = "navy") +
geom_histogram(binwidth = 1) +
labs(title = "Number of tweets by hour",
x = "Hour of the day",
y = "Number of Tweets") +
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour),
fill = "navy") +
geom_histogram(binwidth = 1) +
labs(title = "Number of tweets by hour",
x = "Hour of the day",
y = "Number of Tweets") +
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour)) +
geom_histogram(binwidth = 1) +
labs(title = "Number of tweets by hour",
x = "Hour of the day",
y = "Number of Tweets") +
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour)) +
geom_histogram(bins = 20) +
labs(title = "Number of tweets by hour",
x = "Hour of the day",
y = "Number of Tweets") +
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour)) +
geom_histogram(bins = 100) +
labs(title = "Number of tweets by hour",
x = "Hour of the day",
y = "Number of Tweets") +
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour)) +
geom_histogram(bins = 30) +
labs(title = "Number of tweets by hour",
x = "Hour of the day",
y = "Number of Tweets") +
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour)) +
geom_histogram(bins = 15) +
labs(title = "Number of tweets by hour",
x = "Hour of the day",
y = "Number of Tweets") +
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour)) +
geom_histogram(binwidth = 1) +
labs(title = "Number of tweets by hour",
x = "Hour of the day",
y = "Number of Tweets") +
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour)) +
geom_histogram(binwidth = 1) +
labs(title = "Number of tweets by hour",
x = "Hour of the day",
y = "Number of Tweets") +
scale_x_continuous(breaks = seq(from = 0,
to = 24,
by = 1))
theme_minimal()
hour_tweets <- senators_data %>%
dplyr::select(text, created_at, user) %>%
dplyr::mutate(date = lubridate::mdy_hm(created_at),
hour = lubridate::hour(date))
ggplot(hour_tweets,
aes(x = hour)) +
geom_histogram(binwidth = 1) +
labs(title = "Number of Tweets by Hour",
x = "Hour of the day",
y = "Number of Tweets") +
scale_x_continuous(breaks = seq(from = 0,
to = 24,
by = 1))
theme_minimal()
# set global options for figures, code, warnings, and messages
knitr::opts_chunk$set(fig.width = 6, fig.height = 4, fig.path = "../figs/",
echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
# create an empty temporary object to hold the zipped data
temp <- base::tempfile()
# download the file into temp object
utils::download.file(
url = "https://www.fueleconomy.gov/feg/epadata/vehicles.csv.zip",
destfile = temp,
mode="wb")
# unzip the folder within temp object to acess csv
temp2 <- utils::unzip(temp,
"vehicles.csv",
exdir = "./data/") # unzip .csv to local directory
# import csv into df object
raw_data <- readr::read_csv(temp2) #read the csv into a data frame
# delete the temp file
base::unlink(temp)
# remove the two temp objects from local environment
base::rm(temp, temp2)
View(raw_data)
# ggplot2::facet() is an easy way to evaluate two or more variables to create multiple plots (or facets) within the function.
# fit a linear model; the ~ means we are modeling mpg as "y" and wt as "x"
g1_model <- lm(mpg ~ wt, data = mtcars)
# create a plot, assign it to an object named `g1`
g1 <- ggplot2::ggplot(data = mtcars,
mapping = aes(x = wt,
y = mpg)) +
geom_point() +
geom_smooth(model = g1_model,
method = "lm") +
ylab("Fuel Economy (mi/gal)") +
xlab("Vehicle Weight (x1000 lb)") +
theme_bw(base_size = 14)
g1
# facet previous plot by `cyl` columns and retain labels
g1 + facet_grid(cols = vars(cyl),
labeller = label_both) # label each panel w/ variable name & value
# facet previous plot by`cyl` in rows and retain labels
g1 + facet_grid(rows = vars(cyl),
labeller = label_both)
# instruct R to treat the `cyl` variable as a factor with discrete levels
# this, in turn, tells ggplot2 to assign discrete colors to each level
# `cyl` as a factor with four levels
mtcars$cyl <- as.factor(mtcars$cyl)
# recreate previous plot with color option
g3 <- ggplot2::ggplot(data = mtcars,
mapping = aes(x = wt,
y = mpg,
color = cyl)) +
geom_point() +
ylab("Fuel Economy (mi/gal)") +
xlab("Vehicle Weight (x1000 lb)") +
theme_bw(base_size = 14)
# call plot
g3
# recreate previous plot with color-blind-friendly colors and shapes
ggplot2::ggplot(data = mtcars,
mapping = aes(x = wt,
y = mpg,
color = cyl,
shape = cyl)) + # distinguish by shape also!
geom_point(size = 2.5) +
ylab("Fuel Economy (mi/gal)") +
xlab("Vehicle Weight (x1000 lb)") +
scale_colour_manual(values = c("sandybrown", # color-blind-friendly colors
"orangered",
"steelblue2")) +
theme_bw(base_size = 14)
# create a vector of var names to retain
vars_needed <- c("id",
"make",
"model",
"year",
"cylinders",
"displ",
"drive",
"trany",
"VClass",
"fuelType1",
"comb08",
"highway08",
"city08")
# select necessary variables
df_mpg <- raw_data %>%
dplyr::select(tidyselect::all_of(vars_needed))
# remove full dataframe from environment
rm(raw_data)
View(g1)
# create an empty temporary object to hold the zipped data
temp <- base::tempfile()
# download the file into temp object
utils::download.file(
url = "https://www.fueleconomy.gov/feg/epadata/vehicles.csv.zip",
destfile = temp,
mode="wb")
# unzip the folder within temp object to acess csv
temp2 <- utils::unzip(temp,
"vehicles.csv",
exdir = "./data/") # unzip .csv to local directory
# import csv into df object
raw_data <- readr::read_csv(temp2) #read the csv into a data frame
# delete the temp file
base::unlink(temp)
# remove the two temp objects from local environment
base::rm(temp, temp2)
# create a vector of var names to retain
vars_needed <- c("id",
"make",
"model",
"year",
"cylinders",
"displ",
"drive",
"trany",
"VClass",
"fuelType1",
"comb08",
"highway08",
"city08")
# select necessary variables
df_mpg <- raw_data %>%
dplyr::select(tidyselect::all_of(vars_needed))
# remove full dataframe from environment
rm(raw_data)
# identify the columns that we want to convert to a factor
vars_factr <- c("make", "drive", "trany", "VClass", "fuelType1")
# overwrite existing df
df_mpg <- df_mpg %>%
# convert select vars to factors
dplyr::mutate(dplyr::across(tidyselect::all_of(vars_factr),
.fns = as.factor)) %>%
# overwrite column names with simpler names
dplyr::rename(fuel_type = fuelType1,
cyl = cylinders,
tran = trany,
v_class = VClass) %>% # easier string to type
# keep only data collected after 2000 for the sake of simplicity
dplyr::filter(year >= 2000)
# remove previous objects from global environment
rm(vars_needed, vars_factr)
# create a vector of var names to retain
vars_needed <- c("id",
"make",
"model",
"year",
"cylinders",
"displ",
"drive",
"trany",
"VClass",
"fuelType1",
"comb08",
"highway08",
"city08")
# select necessary variables
df_mpg <- raw_data %>%
dplyr::select(tidyselect::all_of(vars_needed))
# import csv into df object
raw_data <- readr::read_csv(temp2) #read the csv into a data frame
# unzip the folder within temp object to acess csv
temp2 <- utils::unzip(temp,
"vehicles.csv",
exdir = "./data/") # unzip .csv to local directory
# create an empty temporary object to hold the zipped data
temp <- base::tempfile()
# download the file into temp object
utils::download.file(
url = "https://www.fueleconomy.gov/feg/epadata/vehicles.csv.zip",
destfile = temp,
mode="wb")
# unzip the folder within temp object to acess csv
temp2 <- utils::unzip(temp,
"vehicles.csv",
exdir = "./data/") # unzip .csv to local directory
# import csv into df object
raw_data <- readr::read_csv(temp2) #read the csv into a data frame
# delete the temp file
base::unlink(temp)
# remove the two temp objects from local environment
base::rm(temp, temp2)
# create a vector of var names to retain
vars_needed <- c("id",
"make",
"model",
"year",
"cylinders",
"displ",
"drive",
"trany",
"VClass",
"fuelType1",
"comb08",
"highway08",
"city08")
# select necessary variables
df_mpg <- raw_data %>%
dplyr::select(tidyselect::all_of(vars_needed))
# remove full dataframe from environment
rm(raw_data)
# checking data for each type
# examine first five rows of df
head(df_mpg)
# print a character vector of levels for the drive variable in df_mpg
levels(df_mpg$drive)
# print a character vector of levels for the fuel_type variable in df_mpg
levels(df_mpg$fuel_type)
# print a character vector of levels for the v_class variable in df_mpg
levels(df_mpg$v_class)
# identify the columns that we want to convert to a factor
vars_factr <- c("make", "drive", "trany", "VClass", "fuelType1")
# overwrite existing df
df_mpg <- df_mpg %>%
# convert select vars to factors
dplyr::mutate(dplyr::across(tidyselect::all_of(vars_factr),
.fns = as.factor)) %>%
# overwrite column names with simpler names
dplyr::rename(fuel_type = fuelType1,
cyl = cylinders,
tran = trany,
v_class = VClass) %>% # easier string to type
# keep only data collected after 2000 for the sake of simplicity
dplyr::filter(year >= 2000)
# remove previous objects from global environment
rm(vars_needed, vars_factr)
# checking data for each type
# examine first five rows of df
head(df_mpg)
# print a character vector of levels for the drive variable in df_mpg
levels(df_mpg$drive)
# print a character vector of levels for the fuel_type variable in df_mpg
levels(df_mpg$fuel_type)
# print a character vector of levels for the v_class variable in df_mpg
levels(df_mpg$v_class)
mean(df_mpg$cyl)
sum(is.na(df_mpg))
df_mpg %>%
filter(!complete.cases(.))
df_mpg %>%
filter(!complete.cases(.))
mean(df_mpg$cyl, no.rm = TRUE) %>%
round(0)
mean(df_mpg$cyl, no.rm = TRUE) %>%
round(0)
df_mpg %>%
dplyr::filter_all(dplyr::any_vars(is.na(.)))
# preview of code we will learn in Chapter 8 using purrr
df_mpg %>% purrr::map_dfc(~sum(is.na(.)))
# before visualizing the data, convert to tidy format
tidy_mpg <- df_mpg %>%
# choose simple names
dplyr::rename(city = city08,
hwy = highway08,
comb = comb08) %>%
# change data structure from wide to long
tidyr::pivot_longer(cols = c("city", "hwy", "comb"),
names_to = "metric",
values_to = "mpg") %>%
# switch var to factor
dplyr::mutate(metric = as.factor(metric))
View(tidy_mpg)
# create cumulative distribution function plot
ecdf <- ggplot2::ggplot(data = tidy_mpg,
mapping = aes(x = mpg,
color = metric)) +
stat_ecdf() +
theme_bw() +
scale_x_log10() +
xlab(NULL) +
ylab("Quantile")
# create boxplot
box <- ggplot2::ggplot(data = tidy_mpg,
mapping = aes(x = mpg,
fill = metric,
y = metric)) +
geom_boxplot(outlier.alpha = 0.05) +
theme_bw() +
scale_x_log10() +
xlab(NULL) +
ylab("Metric")
# create histogram
hist <- ggplot2::ggplot(data = tidy_mpg,
mapping = aes(x = mpg,
fill = metric)) +
geom_histogram(bins = 35,
alpha = 0.75,
position = "stack") +
theme_bw() +
scale_x_log10() +
xlab("Fuel Economy, mi/gal") +
ylab("Counts")
# embed plots into one figure, this shows all the figures in one figure rather than separate
gridExtra::grid.arrange(ecdf, box, hist,
widths = c(0.4,1,0.4),
layout_matrix = rbind(c(NA, 1, NA),
c(NA, 2, NA),
c(NA, 3, NA)))
library(gridExtra)
library(tidyverse)
gridExtra::grid.arrange(ecdf, box, hist,
widths = c(0.4,1,0.4),
layout_matrix = rbind(c(NA, 1, NA),
c(NA, 2, NA),
c(NA, 3, NA)))
import_packages(gridExtra)
install.packages(gridExtra)
install.packages(gtable)
install.packages(gridExtra)
install.packages("gridExtra")
library(gridExtra)
# embed plots into one figure, this shows all the figures in one figure rather than separate
gridExtra::grid.arrange(ecdf, box, hist,
widths = c(0.4,1,0.4),
layout_matrix = rbind(c(NA, 1, NA),
c(NA, 2, NA),
c(NA, 3, NA)))
e1 <- ggplot2::ggplot(data = df_mpg,
mapping = aes(x = year,
y = comb08)) +
geom_boxplot(aes(group = year),
fill = "skyblue",
outlier.alpha = 0.1) +
scale_y_log10(limits = c(10,100)) +
ylab("Combined Fuel Efficiency (mi/gal)") +
xlab("") +
theme_bw(base_size = 14)
# call plot
e1
standards that require vehicles to meet set fuel economy levles.
cafe <- read_csv("./data/CAFE_stds.csv",
col_names = c("year", "mpg_avg"),
skip = 1)
cafe_csv <- "/Users/genevieve/Reyland-MECH476/data/CAFE_stds.csv"
cafe <- read_csv(file = cafe_csv,
col_names = c("year", "mpg_avg"),
skip = 1)
cafe.plot <- ggplot2::ggplot(data = cafe,
mapping = aes(group = year,
y = mpg_avg,
x = year)) +
geom_col(fill = "maroon") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1)) +
labs( y = "Required Average Fuel Efficiency (mpg)",
x = "Year",
title = "Federal Combined Average Fuel Economy (CAFE) Standards")
# call cafe plot
cafe.plot
# density plot of combined fuel economy by fuel type with facets
g1 <- ggplot2::ggplot(data = df_mpg) +
geom_density(aes(x = comb08, # notice the different location option for x aes
fill = fuel_type)) +
facet_wrap(~ fuel_type,
ncol = 3) +
scale_x_log10() +
theme_bw(base_size = 14) +
theme(legend.position = "none")
# call plot
g1
# density plot of combined fuel economy by fuel type without facets
g2 <- ggplot2::ggplot(data = df_mpg,
mapping = aes(x = comb08)) + # now x aes is here
geom_density(aes(fill = fuel_type),
position = "identity",
alpha = 0.6,
adjust = 1) +
scale_x_log10() +
theme_bw()
# call plot
g2
# look at how vehicle class effects the combined fuel economy for a single year: 2020.
# filter to year 2020 and reorder factor levels
df_mpg.2020 <- df_mpg %>%
dplyr::filter(year == 2020) %>%
dplyr::mutate(v_class = forcats::fct_reorder(.f = v_class,
.x = highway08,
.fun = median))
# create plot of 2020 combined fuel economy
g1 <- ggplot2::ggplot(data = df_mpg.2020) +
geom_boxplot(aes(x = highway08,
color = v_class,
y = v_class)) +
scale_x_log10() +
theme_bw() +
ylab("") +
xlab("Highway Fuel Economy") +
theme(legend.position = "none")
# call plot
g1
